import tkinter as tk
import sqlite3

сплоченность_льда = 5
список_2 = []

#  SQLite
def сохранить_в_базу(данные):
    try:
        connection = sqlite3.connect('ледоколы.db')
        cursor = connection.cursor()
        
        cursor.execute('CREATE TABLE IF NOT EXISTS корабли (наименование TEXT, IMO INTEGER, ледовый_класс INTEGER, скорость INTEGER, пункт_начала TEXT, пункт_окончания TEXT, день_начала INTEGER, месяц_начала INTEGER, год_начала INTEGER, день_окончания INTEGER, месяц_окончания INTEGER, год_окончания INTEGER)')
        
        cursor.execute('INSERT INTO корабли VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', данные)
        
        connection.commit()
    except Exception as e:
        print("Ошибка при сохранении данных в базу данных:", e)
    finally:
        connection.close()

# Для обработки данных функция
def проверить_результат():
    наименование = наименование_поле.get()
    IMO = IMO_поле.get()
    ледовый_класс = ледовый_класс_поле.get()
    скорость = скорость_поле.get()
    пункт_начала = пункт_начала_поле.get()
    пункт_окончания = пункт_окончания_поле.get()
    дата_начала = дата_начала_поле.get()
    дата_окончания = дата_окончания_поле.get()

   
    try:
        IMO = int(IMO)
        ледовый_класс = int(ледовый_класс)
        скорость = int(скорость)
        день_начала, месяц_начала, год_начала = map(int, дата_начала.split('/'))
        день_окончания, месяц_окончания, год_окончания = map(int, дата_окончания.split('/'))
    except ValueError:
        результат_поле.config(state=tk.NORMAL)
        результат_поле.delete(1.0, tk.END)
        результат_поле.insert(tk.END, "Ошибка: Введите корректные числовые и даты.")
        результат_поле.config(state=tk.DISABLED)
        return

    данные = (наименование, IMO, ледовый_класс, скорость, пункт_начала, пункт_окончания,
              день_начала, месяц_начала, год_начала, день_окончания, месяц_окончания, год_окончания)

   
    сохранить_в_базу(данные)

    # Выполнение проверки
    список_2.clear()

    if день_начала < 21:
        if ледовый_класс > 6:
            список_2.append(наименование)
            список_2.append("самостоятельно")
        else:
            if 4 <= ледовый_класс <= 6:
                if сплоченность_льда < 7:
                    список_2.append(наименование)
                    список_2.append("самостоятельно")
                elif ледовый_класс < 4 and сплоченность_льда > 6:
                    список_2.append([наименование, "отказ"])
                else:
                    список_2.append([наименование, "нужна провозка"])
            else:
                список_2.append([наименование, "нужна провозка"])
    else:
        if ледовый_класс > 6:
            список_2.append(наименование)
            список_2.append("самостоятельно")
        else:
            список_2.append([наименование, "нужна провозка"])

    # вывод результата
    результат_поле.config(state=tk.NORMAL)
    результат_поле.delete(1.0, tk.END)
    результат_поле.insert(tk.END, '\n'.join(map(str, список_2)))
    результат_поле.config(state=tk.DISABLED)

# graph интерфейс
root = tk.Tk()
root.title("Проверка ледокола")


наименование_метка = tk.Label(root, text="Наименование:")
наименование_метка.pack()
наименование_поле = tk.Entry(root)
наименование_поле.pack()

IMO_метка = tk.Label(root, text="IMO:")
IMO_метка.pack()
IMO_поле = tk.Entry(root)
IMO_поле.pack()

ледовый_класс_метка = tk.Label(root, text="Ледовый класс:")
ледовый_класс_метка.pack()
ледовый_класс_поле = tk.Entry(root)
ледовый_класс_поле.pack()

скорость_метка = tk.Label(root, text="Скорость:")
скорость_метка.pack()
скорость_поле = tk.Entry(root)
скорость_поле.pack()

пункт_начала_метка = tk.Label(root, text="Пункт начала:")
пункт_начала_метка.pack()
пункт_начала_поле = tk.Entry(root)
пункт_начала_поле.pack()

пункт_окончания_метка = tk.Label(root, text="Пункт окончания:")
пункт_окончания_метка.pack()
пункт_окончания_поле = tk.Entry(root)
пункт_окончания_поле.pack()

дата_начала_метка = tk.Label(root, text="Дата начала (ДД/ММ/ГГГГ):")
дата_начала_метка.pack()
дата_начала_поле = tk.Entry(root)
дата_начала_поле.pack()

дата_окончания_метка = tk.Label(root, text="Дата окончания (ДД/ММ/ГГГГ):")
дата_окончания_метка.pack()
дата_окончания_поле = tk.Entry(root)
дата_окончания_поле.pack()


проверить_кнопка = tk.Button(root, text="Проверить", command=проверить_результат)
проверить_кнопка.pack()


результат_поле = tk.Text(root, wrap=tk.WORD, width=40, height=5)
результат_поле.pack()
результат_поле.config(state=tk.DISABLED)


root.mainloop()
